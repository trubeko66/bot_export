"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è Telegram Channel Export Bot
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –≤ Telethon –±–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞
"""
import asyncio
import logging
import os
from typing import Optional, Callable
from telethon import TelegramClient
from telethon.errors import (
    SessionPasswordNeededError, 
    PhoneCodeExpiredError, 
    PhoneCodeInvalidError,
    FloodWaitError,
    PhoneNumberInvalidError,
    AuthKeyUnregisteredError
)
from config import bot_config

logger = logging.getLogger(__name__)

class AutoAuth:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Telegram"""
    
    def __init__(self, session_name: str = "bot_session"):
        self.session_name = session_name
        self.client = None
        
    async def create_authenticated_client(self, 
                                        phone_number: Optional[str] = None,
                                        password: Optional[str] = None,
                                        code_callback: Optional[Callable] = None,
                                        interactive: bool = False) -> TelegramClient:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ—Ç Telegram –∫–ª–∏–µ–Ω—Ç
        
        Args:
            phone_number: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω)
            password: –û–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å (–∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω)
            code_callback: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            interactive: –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞
            
        Returns:
            –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π TelegramClient
        """
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
        phone = phone_number or bot_config.phone_number
        pwd = password or bot_config.password
        
        if not phone:
            raise ValueError("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PHONE_NUMBER –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if not phone.startswith('+'):
            logger.warning(f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '+': {phone}")
        
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è {phone}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        self.client = TelegramClient(
            self.session_name,
            bot_config.api_id,
            bot_config.api_hash
        )
        
        try:
            logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
            await self.client.connect()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –ª–∏ –º—ã —É–∂–µ
            if await self.client.is_user_authorized():
                logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                return self.client
                
            return await self._perform_auth(phone, pwd, code_callback, interactive)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            if self.client:
                self.client.disconnect()
            raise
    
    async def _perform_auth(self, phone: str, password: Optional[str], 
                           code_callback: Optional[Callable], interactive: bool) -> TelegramClient:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        logger.info(f"–ù–∞—á–∏–Ω–∞—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone}")
        
        if not self.client:
            raise ValueError("–ö–ª–∏–µ–Ω—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω")
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω
            logger.info("–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...")
            sent_code = await self.client.send_code_request(phone)
            logger.info(f"–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –¢–∏–ø: {sent_code.type}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            code = await self._get_verification_code(code_callback, interactive)
            logger.info("–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å –∫–æ–¥–æ–º
            try:
                await self.client.sign_in(phone, code)
                logger.info("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –∫–æ–¥–æ–º")
                
            except SessionPasswordNeededError:
                # –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å
                logger.info("–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å (2FA)")
                cloud_password = await self._get_cloud_password(password, interactive)
                
                await self.client.sign_in(password=cloud_password)
                logger.info("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –æ–±–ª–∞—á–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º")
                
        except PhoneNumberInvalidError:
            raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}")
            
        except (PhoneCodeExpiredError, PhoneCodeInvalidError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
            raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
            
        except FloodWaitError as e:
            logger.error(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {e.seconds} —Å–µ–∫—É–Ω–¥")
            raise ValueError(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {e.seconds} —Å–µ–∫—É–Ω–¥")
            
        except AuthKeyUnregisteredError:
            logger.error("–ö–ª—é—á –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –£–¥–∞–ª–∏—Ç–µ —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏")
            raise ValueError("–ö–ª—é—á –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –£–¥–∞–ª–∏—Ç–µ —Ñ–∞–π–ª bot_session.session")
        
        logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return self.client
    
    async def _get_verification_code(self, code_callback: Optional[Callable], interactive: bool) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        if code_callback:
            return await code_callback()
            
        if interactive:
            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥
            code = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ Telegram: ")
            if not code.strip():
                raise ValueError("–ö–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return code.strip()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        code = os.getenv('TELEGRAM_CODE', '').strip()
        if code:
            return code
            
        # –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–¥–∞
        logger.info("–û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...")
        max_wait = int(os.getenv('CODE_WAIT_TIMEOUT', '60'))
        wait_interval = 5
        
        for attempt in range(0, max_wait, wait_interval):
            await asyncio.sleep(wait_interval)
            code = os.getenv('TELEGRAM_CODE', '').strip()
            if code:
                logger.info(f"–ö–æ–¥ –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ {attempt + wait_interval} —Å–µ–∫—É–Ω–¥")
                return code
            logger.debug(f"–û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–¥–∞... ({attempt + wait_interval}/{max_wait} —Å–µ–∫—É–Ω–¥)")
        
        raise ValueError(f"–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ {max_wait} —Å–µ–∫—É–Ω–¥")
    
    async def _get_cloud_password(self, password: Optional[str], interactive: bool) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å"""
        if password:
            return password
            
        if interactive:
            import getpass
            pwd = getpass.getpass("–í–≤–µ–¥–∏—Ç–µ –æ–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å (2FA): ")
            if not pwd.strip():
                raise ValueError("–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return pwd.strip()
        
        raise ValueError("–û–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ CLOUD_PASSWORD")
    async def get_or_create_client(self) -> TelegramClient:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å –∞–≤—Ç–æ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
        
        Returns:
            –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π TelegramClient
        """
        if self.client and self.client.is_connected():
            if await self.client.is_user_authorized():
                return self.client
        
        return await self.create_authenticated_client()
    
    async def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram"""
        if self.client:
            self.client.disconnect()
            self.client = None
    
    @staticmethod
    def interactive_auth_prompt():
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        print("‚ö°Ô∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Telegram")
        print("="*50)
        print("üì± Telegram –æ—Ç–ø—Ä–∞–≤–∏—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        print("üîë –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ 2FA, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å")
        print("\n")

class CodeFromEnv:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    
    @staticmethod
    async def get_code() -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        
        Returns:
            –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        """
        import os
        code = os.getenv('TELEGRAM_CODE', '')
        if not code:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å –∫–æ–¥ –≤ —Ç–µ—á–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            max_wait = int(os.getenv('CODE_WAIT_TIMEOUT', '60'))  # 60 —Å–µ–∫—É–Ω–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            wait_interval = 5  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            
            for _ in range(0, max_wait, wait_interval):
                await asyncio.sleep(wait_interval)
                code = os.getenv('TELEGRAM_CODE', '')
                if code:
                    break
                    
            if not code:
                raise ValueError(f"–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ {max_wait} —Å–µ–∫—É–Ω–¥")
        
        return code

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
auto_auth = AutoAuth()