#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–≤—Ç–æ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
"""
import os
import sys
import asyncio
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –±–æ—Ç–∞
sys.path.append(str(Path(__file__).parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    required_vars = ['BOT_TOKEN', 'API_ID', 'API_HASH', 'PHONE_NUMBER']
    missing_vars = []
    
    for var in required_vars:
        value = os.getenv(var)
        if not value:
            missing_vars.append(var)
        else:
            if var == 'PHONE_NUMBER':
                logger.info(f"  üì± {var}: {value}")
            elif var in ['BOT_TOKEN', 'API_HASH']:
                logger.info(f"  üîë {var}: {'*' * 10}")
            else:
                logger.info(f"  ‚úÖ {var}: {value}")
    
    optional_vars = ['CLOUD_PASSWORD', 'TELEGRAM_CODE']
    for var in optional_vars:
        value = os.getenv(var)
        if value:
            logger.info(f"  üîê {var}: {'*' * len(value)}")
        else:
            logger.info(f"  ‚ö™ {var}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    if missing_vars:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        return False
    
    logger.info("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True

def check_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤...")
    
    required_files = [
        'config.py',
        'auth_helper.py',
        'bot.py',
        'exporters.py'
    ]
    
    missing_files = []
    for file in required_files:
        if not os.path.exists(file):
            missing_files.append(file)
        else:
            logger.info(f"  ‚úÖ {file}")
    
    if missing_files:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
        return False
    
    logger.info("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
    return True

async def test_config():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        from config import bot_config
        logger.info(f"  üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {bot_config.phone_number}")
        logger.info(f"  üÜî API ID: {bot_config.api_id}")
        logger.info(f"  üîë API Hash: {'*' * 10}")
        logger.info(f"  ü§ñ Bot Token: {'*' * 10}")
        
        if bot_config.password:
            logger.info(f"  üîê –û–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            logger.info(f"  üîê –û–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

async def test_auth_helper():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å –∞–≤—Ç–æ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
    
    try:
        from auth_helper import AutoAuth, auto_auth
        logger.info("  ‚úÖ –ú–æ–¥—É–ª—å auth_helper –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
        auth = AutoAuth("test_session")
        logger.info("  ‚úÖ –≠–∫–∑–µ–º–ø–ª—è—Ä AutoAuth —Å–æ–∑–¥–∞–Ω")
        
        logger.info("‚úÖ –ú–æ–¥—É–ª—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–¥—É–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    logger.info("=" * 60)
    
    tests = [
        ("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", check_environment),
        ("–§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞", check_files),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_config),
        ("–ú–æ–¥—É–ª—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", test_auth_helper),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        logger.info(f"\nüìã –¢–µ—Å—Ç: {test_name}")
        try:
            if asyncio.iscoroutinefunction(test_func):
                result = await test_func()
            else:
                result = test_func()
            
            if result:
                logger.info(f"‚úÖ {test_name}: –ü–†–û–®–ï–õ")
                passed += 1
            else:
                logger.error(f"‚ùå {test_name}: –ù–ï –ü–†–û–®–ï–õ")
                
        except Exception as e:
            logger.error(f"üí• {test_name}: –û–®–ò–ë–ö–ê - {e}")
    
    logger.info("\n" + "=" * 60)
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed == total:
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        logger.info("üìã –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        
        logger.info("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        logger.info("1. –î–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: python auto_auth.py")
        logger.info("2. –î–ª—è Docker: ./docker-auth.sh (Linux) –∏–ª–∏ docker-auth.bat (Windows)")
        logger.info("3. –î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: python bot.py")
        
    else:
        logger.error("üí• –ù–µ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏!")
        logger.error("üìã –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º")

if __name__ == "__main__":
    asyncio.run(main())